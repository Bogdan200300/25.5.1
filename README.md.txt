Project QAP_selenium-pytest 
Данный репозитарий содержит код по Модулю 25, задания 25.3.1 и 25.5.1 

Работа с библиотекой selenium
Настройка проекта:
1. Создаем виртуапльное окружение командой:
    python -m venv venv
2. Активируем виртуальное окружение командой (MacOS/Linux):
    source venv/bin/activate
   для Windows другая команда:
    \env\Scripts\activate.bat
3. Установка зависимостей:
    pip install -r requirements.txt
4. Проверим, что requirements.txt прописана библиотека selenium. 
   Для установки библиотеки, команда: pip install selenium  
5. Настроить в IDE(Pycharm) текущий интерпритатор, выбрав текущее вертуальное окружение

Запуск тестов:
Нажмите на зеленую стрелочку слева от названия теста, если она вдруг не появилась, 
значит вы не установили библиотеку pytest. Установите командой: pip install pytest.

В директории /tests располагаются файлы с тестами:

1. test_show_twise_pets.py / Открывается страница "Все питомцы"
                         / Наличие имени, фотографии и других атрибутов в карточках питомцев                                       

Тестовый сценарий:
1. Устанавливаем неявное ожидание
2. Поиск поля ввода электронной почты, ввод email
3. Устанавливаем неявное ожидание
4. Ищем поле ввода пароля, вводим свой пароль
5. Устанавливаем неявное ожидание
6. Ищем кнопку "Войти" и нажимаем на нее
7. Проверяем, что мы оказались на главной странице пользователя
8. В числе всех питомцев, находим карточки двух, содержащих все элементы, записываем элементы в переменные 
9. Проверяется наличие имени, фотографии и других атрибутов в карточках питомцев


2. test_all_pets_present / Присутствуют все питомцы.

Тест проходит следующие проверки: 
1. Количество строк таблицы соответствует количеству питомцев в блоке статистики пользователя.
2. При добавлении питомца с повторяющимся именем все тесты проходят.
3. При добавлении питомца с повторяющимся именем, породой или возрастом все тесты проходят.

Тестовый сценарий:
1. Получение списка всех обьектов моих питомцев
2. Проверка, что список своих питомцев не пуст
3. Формирование пустого списка
4. Цикл. Получение информации о питомце из списка всех своих питомцев
5. Цикл. Очистка от лишних символов
6. Цикл. Добавление в список list_pets информации рода: имя, тип, возраст
7. Подсчет питомцев
8. Сохранение в переменную statistic элементов статистики
9. Получение количества питомцев из данных статистики
10. Проверка равенства количества питомцев в карточках с количеством питомцев из данных статистики


3. test_half_pets_has_photo / Хотя бы у половины моих питомцев есть фото.

Тестовый сценарий:
1. Получение списка всех обьектов питомцев
2. Проверка, что список своих питомцев не пуст
3. Сохраняем в переменную statistic элементы статистики
4. Сохраняем в переменную images элементы с атрибутом img
5. Получаем количество питомцев из данных статистики
6. Находим половину от количества питомцев
7. Находим количество питомцев с фотографией
8. Проверяем что количество питомцев с фотографией больше или равно половине количества питомцев


4. test_all_pets_has_name_age_breed.py / У всех питомцев есть имя, возраст и порода.

Тестовый сценарий:
1. Сохраняем в переменную pet_data элементы с данными о питомцах
2. Перебираем данные из pet_data, оставляем имя, возраст, и породу остальное меняем на пустую строку
   и разделяем по пробелу. Находим количество элементов в получившемся списке и сравниваем их
   с ожидаемым результатом


5. test_all_pets_has_diff_names.py / У всех питомцев разные имена.

Тест проходит следующие проверки: 
При добавлении питомца с повторяющимся именем все тесты не проходят

Тестовый сценарий:
1. Сохраняем в переменную pet_data элементы с данными о моих питомцах
2. Перебираем данные из pet_data, оставляем имя, возраст, и породу, остальное меняем
   на пустую строку и разделяем по пробелу. Выбираем имена и добавляем их в
   список pets_name.
3. Перебираем имена и если имя повторяется, то прибавляем к счетчику counter единицу.
   Проверяем, если counter == 0, то повторяющихся имен нет.
4. Проверяем, есть ли повторяющиеся имена питомцев


6. test_all_pets_present.py / В списке нет повторяющихся питомцев

Тестовый сценарий:
1. Устанавливаем явное ожидание
2. Сохраняем в переменную pet_data элементы с данными о питомцах
3. Перебираем данные из pet_data, оставляем имя, возраст, и породу остальное меняем на пустую строку,
   разделяем по пробелу. Формируем список
4. Cклеиваем имя, возраст и породу, получившиеся склеенные слова добавляем в строку
   и между ними вставляем пробел
5. Получаем список из строки
6. Превращаем список в множество
7. Находим количество элементов списка и множества
8. Из количества элементов списка вычитаем количество элементов множества
9. Если количество элементов == 0 значит карточки с одинаковыми данными отсутствуют


Тесты созданы на pytest-selenium

В корневой директории лежит файл settings.py, содержащий отсылку на файл .env, содержащий информацию о валидном логине и пароле

В директории /tests располагается файл conftest.py содержащий:
1. Фикстуру автоматического обновления драйвера:
   webdriver_auto_update - способ автоматической загрузки драйвера Chrome
2. Фикстуру с драйвером для Browser: Chrome Версия 116.0.5845.141 (64 бит) 
3. Фикстуру перехода на страницу "Мои питомцы", c авторизацией, сохранением скриншота "Мои питомцы" в файл 
4. Фикстуру, формирующую информации о запущенном тесте
5. Фикстуру тайминга теста
6. Фикстуру для создания отчета о выполнении теста

Команда запуска теста: python -m pytest --v test_show_all_pets.py
